// ##########################################################################################################################
// ################## SPEED OVER GROUNG: DatLinearEquation.cpp ##############################################################
// ##########################################################################################################################	
//	Autoren: Christian Schauer, ,
//	Stand: 23.01.2012
//
//
//
#include "DatLinearEquation.h"


DatLinearEquation::DatLinearEquation(DatCoord<int> p1, DatCoord<int> p2)
{
	DatCoord<int> vektor_p1_p2 = p2 - p1;

	// --------------------------------------------------------------
	// versuchen 1.#inf zu eliminieren
	if(vektor_p1_p2.getX() == 0)
	{
		vektor_p1_p2.setX(1);
	}
	// --------------------------------------------------------------

	this->steigung = double(vektor_p1_p2.getY()) / double(vektor_p1_p2.getX());

	this->y_schnittpunkt = double(p1.getY()) - double(p1.getX()) * this->steigung;
}

DatLinearEquation::DatLinearEquation(DatCoord<int> p1, double steigung)
{
	this->steigung = steigung;
	this->y_schnittpunkt = double(p1.getY()) - double(p1.getX()) * this->steigung;
}

DatLinearEquation::DatLinearEquation(DatCoord<double> p1, DatCoord<double> p2)
{
	DatCoord<double> vektor_p1_p2 = p2 - p1;

	// --------------------------------------------------------------
	// versuchen 1.#inf zu eliminieren
	if(vektor_p1_p2.getX() == 0)
	{
		vektor_p1_p2.setX(1);
	}
	// --------------------------------------------------------------
	
	this->steigung = vektor_p1_p2.getY() / vektor_p1_p2.getX();
	this->y_schnittpunkt = p1.getY() - p1.getX() * this->steigung;
}


DatLinearEquation::~DatLinearEquation(void)
{
}

// ##########################################################################################################################
// ######## getYfor #########################################################################################################
// ##########################################################################################################################
int DatLinearEquation::getXfor( int y)
{

	// --------------------------------------------------------------
	// Temp Workaround
	
	if(this->steigung == 0)
	{
		return 0;
	}
	// --------------------------------------------------------------

	return int((double(y) - this->y_schnittpunkt) / this->steigung);
}
// **************************************************************************************************************************

// ##########################################################################################################################
// ######## getYfor #########################################################################################################
// ##########################################################################################################################
int DatLinearEquation::getYfor( int x){
	return int(double(x) * this->steigung + this->y_schnittpunkt);
}
// **************************************************************************************************************************

// ##########################################################################################################################
// ######## getSteigung #####################################################################################################
// ##########################################################################################################################
double  DatLinearEquation::getSteigung(){
	return this->steigung;
}
// **************************************************************************************************************************

// ##########################################################################################################################
// ######## getYschnitt #####################################################################################################
// ##########################################################################################################################
double DatLinearEquation::getYschnitt(){
	return this->y_schnittpunkt;
}
// **************************************************************************************************************************


// ##########################################################################################################################
// ######## erstellt neue Geradengleichung ##################################################################################
// ##########################################################################################################################
void DatLinearEquation::setLinearEquation(DatCoord<int> p1, DatCoord<int> p2){
	DatCoord<int> vektor_p1_p2 = p2 - p1;

	// --------------------------------------------------------------
	// versuchen 1.#inf zu eliminieren
	if(vektor_p1_p2.getX() == 0)
	{
		vektor_p1_p2.setX(1);
	}
	// --------------------------------------------------------------
	
	this->steigung = double(vektor_p1_p2.getY()) / double(vektor_p1_p2.getX());
	this->y_schnittpunkt = double(p1.getY()) - double(p1.getY()) * this->steigung;
}

void DatLinearEquation::setLinearEquation(DatCoord<double> p1, DatCoord<double> p2){
	DatCoord<double> vektor_p1_p2 = p2 - p1;

	// --------------------------------------------------------------
	// versuchen 1.#inf zu eliminieren
	if(vektor_p1_p2.getX() == 0)
	{
		vektor_p1_p2.setX(1);
	}
	// --------------------------------------------------------------

	this->steigung = vektor_p1_p2.getY() / vektor_p1_p2.getX();
	this->y_schnittpunkt = p1.getY() - p1.getY() * this->steigung;
}
// **************************************************************************************************************************
